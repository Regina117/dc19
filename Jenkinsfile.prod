pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = "158.160.145.70:8123"
        REPO_NAME = "mydockerrepo"
        IMAGE_NAME_BUILD = "geoserver_build"
        IMAGE_NAME_PROD = "geoserver_prod"
        NEXUS_CREDENTIALS = "nexus-credentials"
        COMPOSE_FILE = "docker-compose.yml"
        TOMCAT_SERVER = "158.160.137.243:8080"
        TOMCAT_CREDENTIALS = "dd79bb68-ab91-4d6a-9530-bd0f093c8020"
    }
    stages {
        stage('Pull Docker Images from Nexus') {
            steps {
                script {
                    echo "Logging in to Docker registry..."
                    withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        """
                    }
                    echo "Pulling Docker images from Nexus..."
                    sh "docker pull ${DOCKER_REGISTRY}/${REPO_NAME}/${IMAGE_NAME_BUILD}:latest"
                    sh "docker pull ${DOCKER_REGISTRY}/${REPO_NAME}/${IMAGE_NAME_PROD}:latest"
                }
            }
        }
        stage('Deploy with Docker Compose') {
            steps {
                script {
                    echo "Deploying with Docker Compose..."
                    sh """
                        docker-compose -f ${COMPOSE_FILE} up -d
                    """
                }
            }
        }
        stage('Deploy WAR to Tomcat') {
            steps {
                script {
                    echo "Deploying WAR to Tomcat..."
                    sh "mvn clean package -DskipTests"  
                    deploy adapters: [tomcat9(credentialsId: TOMCAT_CREDENTIALS, path: '', url: TOMCAT_SERVER)], contextPath: 'geoserver', war: '**/*.war'
                }
            }
        }
    }
}
